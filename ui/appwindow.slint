import { Button, VerticalBox, HorizontalBox, GroupBox } from "std-widgets.slint";
// import { Window, Rectangle, Text, Image, TouchArea } from "std-widgets.slint";

component boardSquare inherits Rectangle{
    callback clicked();

    in property <length> square_size;
    in property <bool> position_even;
    in property <bool> is_clicked;
    in property <bool> possible_move;
    in property <image> piece;

    area := TouchArea {  
        clicked => {
            root.clicked();
        }
    }
    property <color> hover: is_clicked ? #ff00009d : #ff0000;
    property <color> even-color: is_clicked ? #108d2794 : #108d27;
    property <color> odd-color: is_clicked ? #0011ff94 : #0011ff;

    background: area.has-hover ? hover: position_even ? even-color : odd-color;
    Image {
        width: square_size;
        height: square_size;
        source: piece;
    }

}

export component appWindow inherits Window {
    callback start_game(int, int);
    callback board_square_clicked(int);
    callback white_promote_to(int);
    callback black_promote_to(int);

    in-out property <int> white: 0;
    in-out property <int> black: 0;
    in-out property <[bool]> square_clicked: [false];
    in-out property <[bool]> possible_move: [false];
    in-out property <[image]> piece_positions: [@image-url("../icons/white-pawn.png")];
    property <length> square_size: 80px;

    default-font-size: 15px;
    HorizontalBox {
        VerticalBox {
            Rectangle {
                height: (square_size + 5px) * 8;
                width: (square_size + 5px) * 8;
                for s[i] in 64 : boardSquare {
                    x: (square_size + 5px) * Math.mod(i, 8);
                    y: (square_size + 5px) * Math.floor(i / 8);
                    height: square_size;
                    width: square_size;
                    position_even: Math.mod(Math.mod(i, 8) + Math.floor(i / 8), 2) == 0;
                    is_clicked: square_clicked[i];
                    possible_move: possible_move[i];
                    piece: piece_positions[i];
                    square_size: square_size;

                    clicked => {
                        root.board_square_clicked(i);
                    }
                }
            }
            Button {
                text: "New Game";
                clicked => {
                    root.start_game(white, black);
                }
            }
        }
        VerticalBox {
            Text {
                text: "Select type for black";
            }
            HorizontalBox {
                Button {
                    text: "Random";
                    clicked => {
                        black = 0;
                    }
                }
                Button {
                    text: "Human";
                    clicked => {
                        black = 1;
                    }
                }
            }
            Text {
                text: "Select promotion type for black";
            }
            HorizontalBox {
                Button {
                    text: "knigth";
                    clicked => {
                        black_promote_to(2);
                    }
                }
                Button {
                    text: "bishop";
                    clicked => {
                        black_promote_to(3);
                    }
                }
                Button {
                    text: "rook";
                    clicked => {
                        black_promote_to(4);
                    }
                }
                Button {
                    text: "queen";
                    clicked => {
                        black_promote_to(5);
                    }
                }
            }
            Text {
                text: "Select type for white";
            }
            HorizontalBox {
                Button {
                    text: "Random";
                    clicked => {
                        white = 0;
                    }
                }
                Button {
                    text: "Human";
                    clicked => {
                        white = 1;
                    }
                }
            }
            Text {
                text: "Select promotion type for white";
            }
            HorizontalBox {
                Button {
                    text: "knigth";
                    clicked => {
                        white_promote_to(2);
                    }
                }
                Button {
                    text: "bishop";
                    clicked => {
                        white_promote_to(3);
                    }
                }
                Button {
                    text: "rook";
                    clicked => {
                        white_promote_to(4);
                    }
                }
                Button {
                    text: "queen";
                    clicked => {
                        white_promote_to(5);
                    }
                }
            }
        }
    }
}