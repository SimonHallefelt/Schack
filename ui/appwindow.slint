import { Button, VerticalBox, HorizontalBox, GroupBox } from "std-widgets.slint";
// import { Window, Rectangle, Text, Image, TouchArea } from "std-widgets.slint";

component boardSquare inherits Rectangle{
    callback clicked();

    in property <length> square_size;
    in property <bool> position_even;
    in property <bool> is_clicked;
    in property <bool> possible_move;
    in property <image> piece;

    area := TouchArea {  
        clicked => {
            root.clicked();
        }
    }
    property <color> hover: is_clicked ? #ff00009d : #ff0000;
    property <color> even-color: is_clicked ? #108d2794 : #108d27;
    property <color> odd-color: is_clicked ? #0011ff94 : #0011ff;

    background: area.has-hover ? hover: position_even ? even-color : odd-color;
    Image {
        width: square_size;
        height: square_size;
        source: piece;
    }

}

export component appWindow inherits Window {
    callback start_game(int, int);
    callback board_square_clicked(int);

    in-out property <int> player_1: 0;
    in-out property <int> player_2: 0;
    in-out property <[bool]> square_clicked: [false];
    in-out property <[bool]> possible_move: [false];
    in-out property <[image]> piece_positions: [@image-url("../icons/white-pawn.png")];
    property <length> square_size: 80px;

    default-font-size: 15px;
    VerticalBox {
        Text {
            text: "Select type for player 2";
        }
        HorizontalBox {
            Button {
                text: "Random";
                clicked => {
                    player_2 = 0;
                }
            }
            Button {
                text: "Human";
                clicked => {
                    player_2 = 1;
                }
            }
        }
        Text {
            text: "Board";
        }
        Rectangle {
            height: (square_size+5px) * 8;
            width: (square_size+5px) * 8;
            for s[i] in 64 : boardSquare {
                x: (square_size+5px) * Math.mod(i, 8);
                y: (square_size+5px) * Math.floor(i / 8);
                height: square_size;
                width: square_size;
                position_even: Math.mod(Math.mod(i, 8) + Math.floor(i / 8), 2) == 0;
                is_clicked: square_clicked[i];
                possible_move: possible_move[i];
                piece: piece_positions[i];
                square_size: square_size;

                clicked => {
                    root.board_square_clicked(i);
                }
            }
        }
        Text {
            text: "Select type for player 1";
        }
        HorizontalBox {
            Button {
                text: "Random";
                clicked => {
                    player_1 = 0;
                }
            }
            Button {
                text: "Human";
                clicked => {
                    player_1 = 1;
                }
            }
        }
        Button {
            text: "New Game";
            clicked => {
                root.start_game(player_1, player_2);
            }
        }
    }
}